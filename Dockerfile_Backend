# Use official PHP-FPM image with Alpine
FROM php:8-fpm-alpine
WORKDIR /app/api

ARG UID=1000
ARG GID=1000

ENV UID=${UID}
ENV GID=${GID}

# Create Laravel user and adjust PHP-FPM config
RUN addgroup -g ${GID} laravel && adduser -G laravel -u ${UID} -D laravel \
  && sed -i "s/user = www-data/user = laravel/" /usr/local/etc/php-fpm.d/www.conf \
  && sed -i "s/group = www-data/group = laravel/" /usr/local/etc/php-fpm.d/www.conf

# Install required tools and extensions
RUN apk update && apk add --no-cache \
    mysql-client \
    nginx \
    bash \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    oniguruma-dev \
    libxml2-dev \
    curl \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install gd pdo pdo_mysql mbstring exif pcntl bcmath opcache

# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Copy application code to the container
COPY ./unicorn-backend /app/api

# Set permissions for storage and cache
RUN mkdir -p /app/api/storage /app/api/bootstrap/cache \
  && chown -R laravel:laravel /app/api/storage /app/api/bootstrap/cache

# Install Composer dependencies
RUN composer update --no-dev --optimize-autoloader

# Copy Nginx configuration
COPY ./nginx/backend_nginx.conf /etc/nginx/nginx.conf

# Expose both Nginx (80) and PHP-FPM (9000)
EXPOSE 80 9000

# Start services (Nginx + PHP-FPM)
CMD ["sh", "-c", "php-fpm -D && nginx -g 'daemon off;'"]
